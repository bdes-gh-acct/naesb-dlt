import {
  ConfigEnvelope,
  ConfigGroup,
} from '@hyperledger/fabric-protos/lib/common';
import { MSPConfig } from '@hyperledger/fabric-protos/lib/msp';
import { set } from 'lodash';

const blockPayload =
  '';

const decodeGroup = (group: ConfigGroup) => {
  const result = {};
  group.getValuesMap().forEach((value, key) => {
    set(result, key, new TextDecoder().decode(value.getValue_asU8()));
  });
  group.getGroupsMap().forEach((item, key) => {
    set(result, key, decodeGroup(item));
  });
  return result;
};

describe('events/blockUtil', () => {
  it('should extract default block', () => {
    const array = Buffer.from(blockPayload, 'base64');
    const envelope = ConfigEnvelope.deserializeBinary(array);
    console.log(envelope.getConfig()?.getSequence());
    const configGroup = envelope.getConfig()?.getChannelGroup();
    console.log(configGroup ? decodeGroup(configGroup) : undefined);
  });
});
